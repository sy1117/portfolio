{"version":3,"file":"index.modern.js","sources":["../src/generateErrorMessage.ts","../src/validation/index.ts","../src/validation/validators.ts","../src/Field.tsx","../src/index.tsx"],"sourcesContent":["import { CustomValidationRules } from \"./Field\";\n\ntype TValidationRules = keyof CustomValidationRules;\n\nconst generateMessage = (\n  ruleName: TValidationRules,\n  label: string,\n  value?: string | number,\n) => {\n  const MessageMap: Partial<Record<TValidationRules, string>> = {\n    required: `${label} 을(를) 입력해주세요.`,\n    min: `${label} 은(는) ${value} 보다 커야 합니다.`,\n    max: `${label} 은(는) ${value} 보다 작아야 합니다.`,\n    maxLength: `${label} 은(는) ${value}자 이내로 작성해주세요.`,\n    minLength: `${label} 은(는) ${value} 자 이상이어야 합니다.`,\n    pattern: `${label} 이(가) 형식에 맞지 않습니다.`,\n    validate: `${label} 이(가) 유효하지 않습니다.`,\n    equal: `${label} 이(가) ${value} 와 일치하지 않습니다.`,\n    notEqual: `${label} 은(는) ${value} 와 같을 수 없습니다.`,\n    greaterThan: `${label} 은(는) ${value} 보다 커야 합니다.`,\n    greaterThanOrEqual: `${label} 은(는) ${value} 보다 크거나 같아야 합니다`,\n    lessThan: `${label} 은(는) ${value} 보다 작아야 합니다.`,\n    lessThanOrEqual: `${label} 은(는) ${value} 보다 작거나 같아야 합니다`,\n  };\n  return MessageMap[ruleName];\n};\n\nconst generateErrorMessage = (\n  label: string,\n  name: string,\n  rules: CustomValidationRules,\n) => {\n  let result: any = {};\n  for (let [key, value] of Object.entries(rules)) {\n    const ruleName = key as TValidationRules;\n    const ruleValue = value as any;\n    switch (typeof ruleValue) {\n      case \"boolean\":\n        result[ruleName] = generateMessage(ruleName, label || name);\n        break;\n      case \"string\":\n        result[ruleName] = {\n          value: ruleName,\n          message: ruleValue,\n        };\n        break;\n      case \"number\":\n        result[ruleName] = {\n          value: ruleValue,\n          message: generateMessage(ruleName, label || name, ruleValue),\n        };\n        break;\n      case \"object\":\n        const { message } = ruleValue;\n        if (message) {\n          result[ruleName] = {\n            ...ruleValue,\n            message: ruleValue.message,\n          };\n        } else {\n          result[ruleName] = {\n            ...ruleValue,\n            message: generateMessage(ruleName, label || name, ruleValue as any),\n          };\n        }\n        break;\n      default:\n        result[ruleName] = ruleValue;\n        break;\n    }\n  }\n  return result;\n};\n\nexport default generateErrorMessage;\n","import { TField, CustomValidationRules } from \"../Field\";\nimport {\n  equal,\n  notEqual,\n  greaterThan,\n  greaterThanOrEqual,\n  lessThan,\n  lessThanOrEqual,\n} from \"./validators\";\n\nconst validationFnMap = {\n  equal,\n  notEqual,\n  greaterThan,\n  greaterThanOrEqual,\n  lessThan,\n  lessThanOrEqual,\n};\n\nexport const mixCustomValidate = (\n  control: any,\n  type: TField,\n  rules?: CustomValidationRules,\n): CustomValidationRules => {\n  let result: any = {};\n  let validate: any = {};\n  if (rules) {\n    if (rules.validate) {\n      return rules;\n    }\n\n    for (const [key, value] of Object.entries(rules)) {\n      if (\n        key === \"equal\" ||\n        key === \"notEqual\" ||\n        key === \"greaterThan\" ||\n        key === \"greaterThanOrEqual\" ||\n        key === \"lessThan\" ||\n        key === \"lessThanOrEqual\"\n      ) {\n        validate.lessThan = validationFnMap[key](control, type, value);\n      } else {\n        result[key] = value;\n      }\n    }\n  }\n\n  result.validate = validate;\n  return result;\n};\n","import { TField } from \"../Field\";\nimport moment from \"moment\";\n\nexport const equal = (control: any, _: TField, { name, message }: any) => (\n  value: any\n) => {\n  let data = control.getValues();\n  let compareValue = data[name];\n  return value === compareValue || message;\n};\n\nexport const notEqual = (control: any, _: TField, { name, message }: any) => (\n  value: any\n) => {\n  let data = control.getValues();\n  let compareValue = data[name];\n  return value !== compareValue || message;\n};\n\nexport const greaterThan = (\n  control: any,\n  type: TField,\n  { name, message }: any\n) => (value: any) => {\n  let data = control.getValues();\n  let compareValue = data[name];\n  if (type === \"date\") {\n    return moment(value).isAfter(compareValue) || message;\n  } else {\n    return parseInt(value) > compareValue || message;\n  }\n};\n\nexport const greaterThanOrEqual = (\n  control: any,\n  type: TField,\n  { name, message }: any\n) => (value: any) => {\n  let data = control.getValues();\n  let compareValue = data[name];\n  if (type === \"date\") {\n    return moment(value).isSameOrAfter(compareValue) || message;\n  } else {\n    return parseInt(value) >= compareValue || message;\n  }\n};\n\nexport const lessThan = (\n  control: any,\n  type: TField,\n  { name, message }: any\n) => (value: any) => {\n  let data = control.getValues();\n  let compareValue = data[name];\n  if (type === \"date\") {\n    return moment(value).isBefore(compareValue) || message;\n  } else {\n    return parseInt(value) < compareValue || message;\n  }\n};\n\nexport const lessThanOrEqual = (\n  control: any,\n  type: TField,\n  { name, message }: any\n) => (value: any) => {\n  const data = control.getValues();\n  const compareValue = data[name];\n  if (type === \"date\") {\n    const date = moment(value);\n    return date.isSameOrBefore(compareValue) || message;\n  } else {\n    return parseInt(value) <= parseInt(compareValue) || message;\n  }\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { forwardRef } from \"react\";\nimport { useFormContext, RegisterOptions } from \"react-hook-form\";\n// import {\n//   Textarea,\n//   Select,\n//   ImageUploader2 as ImageUploader,\n//   Checkbox,\n// } from \"@donation/admin-ui\";\nimport generateErrorMessage from \"./generateErrorMessage\";\nimport { mixCustomValidate } from \"./validation\";\nimport { TFormMode } from \"./index\";\n\nexport type TField =\n  | \"text\"\n  | \"password\"\n  | \"date\"\n  | \"hidden\"\n  | \"email\"\n  | \"number\"\n  | \"checkbox\"\n  | \"textarea\"\n  | \"select\";\n\nconst FieldMap: Record<Partial<TField>, any> = {\n  text: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"text\" {...props} ref={ref} />\n  )),\n  date: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"date\" {...props} ref={ref} />\n  )),\n  password: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"password\" {...props} ref={ref} />\n  )),\n  number: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"number\" {...props} ref={ref} />\n  )),\n  hidden: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"hidden\" {...props} ref={ref} />\n  )),\n  email: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"email\" {...props} ref={ref} />\n  )),\n  checkbox: forwardRef(({ ...props }: any, ref) => (\n    <input type=\"checkbox\" {...props} ref={ref} />\n  )),\n  select: forwardRef(({ ...props }: any, ref) => (\n    <select {...props} ref={ref} />\n  )),\n  textarea: forwardRef(({ ...props }: any, ref) => (\n    <textarea {...props} ref={ref} />\n  )),\n};\n\nexport type TCompositionField = \"image\" | \"radiogroup\" | \"content\";\n\nexport const getComponent = (type: TField) => {\n  return FieldMap[type];\n};\n\n// type StringKey<T> = keyof T & string;\nexport interface ValidationNameMessage {\n  name: string;\n  message: string;\n}\nexport interface CustomValidationRules extends RegisterOptions {\n  equal?: ValidationNameMessage;\n  notEqual?: ValidationNameMessage;\n  lessThan?: ValidationNameMessage;\n  lessThanOrEqual?: ValidationNameMessage;\n  greaterThan?: ValidationNameMessage;\n  greaterThanOrEqual?: ValidationNameMessage;\n}\nexport interface IField<T> {\n  type: TField | TCompositionField | Array<TField> | any;\n  name: keyof T & string;\n  label?: string;\n  placeholder?: string;\n  helperText?: string;\n  error?: boolean;\n  autoFocus?: boolean;\n  maxLength?: number;\n  required?: boolean;\n  disabled?: boolean;\n  readOnly?: true;\n  value?: string | number | boolean;\n  // rules?: CustomValidationRules<T>;\n  rules?: CustomValidationRules;\n  props?: any;\n  hiddenIf?: TFormMode[];\n  readOnlyIf?: TFormMode[];\n  className?: string;\n}\n\nexport const Field: React.FC<IField<any>> = ({\n  name,\n  rules,\n  type,\n  label,\n  placeholder,\n  props,\n  className,\n  ...extra\n}) => {\n  const { control, errors, register, getValues } = useFormContext();\n  if (rules) {\n    rules = generateErrorMessage(label || placeholder || \"\", name || \"\", rules);\n    rules = mixCustomValidate(control, type, rules);\n  }\n\n  if (typeof type === \"string\") {\n    let Component = getComponent(type as TField);\n\n    if (name && type === \"content\") {\n      props = {\n        ...props,\n        data: getValues(),\n      };\n    }\n\n    if (name && errors[name]) {\n      props = {\n        ...props,\n        error: true,\n        helperText:\n          errors[name] === \"object\" && Array.isArray(errors[name])\n            ? errors[name]\n            : errors[name]?.message,\n      };\n    }\n    return (\n      <Component\n        ref={register(rules as any)}\n        className={className}\n        name={name}\n        {...(label && { label })}\n        {...(placeholder && { placeholder })}\n        {...props}\n        {...extra}\n      />\n    );\n  } else {\n    const Type = type;\n    return (\n      <Type\n        name={name}\n        label={label}\n        data={getValues()}\n        control={control}\n        {...props}\n        {...extra}\n      />\n    );\n  }\n};\n\nexport default Field;\n","import React, { useEffect, FormHTMLAttributes, FormEvent, Fragment } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\n// import { refine } from \"src/module/FormData\";\nimport Field, { IField, TField, TCompositionField } from \"./Field\";\n// import FieldArray, { IFieldArray } from \"./compositionField/FieldArray\";\n// import FieldContent from \"./compositionField/FieldContent/FieldContent\";\n// import FieldImage from \"./compositionField/FieldImage\";\n// import FieldRadioGroup from \"./compositionField/FieldRadioGroup\";\nimport generateErrorMessage from \"./generateErrorMessage\";\n\nexport type TFormMode = \"create\" | \"read\" | \"update\";\n\nexport interface IForm extends FormHTMLAttributes<HTMLFormElement> {\n  mode?: TFormMode;\n  validate?: \"onSubmit\" | \"onChange\" | \"onBlur\" | \"all\";\n  fields: Array<IField<any>>;//| IFieldArray>;\n  compareFields?: string[];\n  data?: object;\n  onChange?: (\n    e: FormEvent<HTMLFormElement>,\n    values?: any,\n    errors?: any\n  ) => void;\n  onSubmit: (data: any) => void;\n  forceDirtyFields?: Array<string>;\n}\n\nexport const FormController: React.FC<IForm> = ({\n  mode = \"create\",\n  validate = \"onSubmit\",\n  data,\n  compareFields,\n  fields,\n  onChange,\n  onSubmit,\n  children,\n  forceDirtyFields,\n  ...props\n}) => {\n  const methods = useForm({ defaultValues: data, mode: validate as \"onSubmit\" });\n  useEffect(() => {\n    methods.reset(data);\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const {\n    formState: { dirtyFields },\n    getValues,\n    errors,\n  } = methods;\n\n  const getComponent = (type: TField | TField[] | TCompositionField) => {\n    // if (typeof type === \"object\" || Array.isArray(type)) return FieldArray;\n\n    switch (type) {\n      // case \"content\":\n      //   return FieldContent;\n      // case \"image\":\n      //   return FieldImage;\n      // case \"radiogroup\":\n      //   return FieldRadioGroup;\n      default:\n        return Field;\n    }\n  };\n\n  const onChangeHandler = (e: FormEvent<HTMLFormElement>) => {\n    let errorFields: any = {};\n    if (onChange) {\n      Object.keys(errors).forEach((key) => {\n        errorFields[key] = {};\n      });\n      onChange(e, getValues(), errorFields);\n    }\n  };\n\n  const submitHandler = (data: any) => {\n    // data = refine(data);\n\n    if (mode === \"create\") onSubmit(data);\n    else {\n      let editedData: any = {};\n      Object.keys(dirtyFields).forEach((key) => {\n        editedData[key] = data[key];\n      });\n\n      (forceDirtyFields || []).forEach((forceDirtyField) => {\n        editedData[forceDirtyField] = data[forceDirtyField];\n      });\n\n      /**\n       * 삭제 시, 변경 사항 표시 안되서 일단 리스트는 다 보냄\n       */\n      //@ts-ignore\n      for (let key of methods.control.fieldArrayNamesRef.current) {\n        editedData[key] = data[key];\n      }\n      onSubmit(editedData);\n    }\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <form\n        onSubmit={methods.handleSubmit(submitHandler)}\n        onChange={onChangeHandler}\n        {...props}\n      >\n        {fields.map((field, idx) => {\n          const { type, rules, label, placeholder, name } = field;\n          const FieldComponent = getComponent(type);\n          field.rules = generateErrorMessage(\n            label || placeholder || \"\",\n            name,\n            rules || {}\n          );\n          if (field.hiddenIf && field.hiddenIf.indexOf(mode) > -1) {\n            return <Fragment></Fragment>;\n          }\n\n          field.props = {\n            ...field.props,\n            readOnly:\n              mode === \"read\" ||\n              (field.readOnlyIf && field.readOnlyIf.indexOf(mode) > -1),\n          };\n\n          return <FieldComponent {...field} key={idx} />;\n        })}\n        {children}\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default FormController;\n"],"names":["generateMessage","ruleName","label","value","required","min","max","maxLength","minLength","pattern","validate","equal","notEqual","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","generateErrorMessage","name","rules","result","Object","entries","ruleValue","message","validationFnMap","control","_","getValues","type","compareValue","moment","isAfter","parseInt","isSameOrAfter","isBefore","isSameOrBefore","FieldMap","text","forwardRef","ref","props","React","date","password","number","hidden","email","checkbox","select","textarea","Field","placeholder","className","extra","useFormContext","errors","register","key","mixCustomValidate","Component","getComponent","data","error","helperText","Array","isArray","_errors$name","FormController","mode","fields","onChange","onSubmit","children","forceDirtyFields","methods","useForm","defaultValues","useEffect","reset","dirtyFields","formState","FormProvider","handleSubmit","editedData","keys","forEach","forceDirtyField","fieldArrayNamesRef","current","e","errorFields","map","field","idx","FieldComponent","hiddenIf","indexOf","Fragment","readOnly","readOnlyIf"],"mappings":"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"}